#include <cstring> // add this header for strlen
#include <ncurses.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <ctime>
#include <string>
#include <cstring> // add this header for strlen
#include <ncurses.h> // add this header for mvprintw and wgetnstr
#include "main.h"

using namespace std;

//using string instead of char array anytime possible
//use cpp style casting instead of c style casting
//This project is aim to develop a game by using ncurses library
//The knight is trapped in a maze and he needs to escape from the maze by finding the key
//using dynamic memory allocation to store the maze

//generating a 30x50 maze
//0 represents wall, 1 represents path, 2 represents key, 3 represents exit
// 4 represents the portal
//the maze is generated by using random number generator
void generate_maze(int **maze){
    srand(time(NULL));
    for(int i=0;i<30;i++){
        for(int j=0;j<30;j++){
            if(i==0 || i==29 || j==0 || j==29){
                maze[i][j] = 0;
            }
            else{
                if (rand()%100 < 20){
                    maze[i][j] = 0;
                }
                else
                maze[i][j] = 1;
            }
        }
    }
    //make sure the knight can escape from the maze
    //check whether the maze is solvable
    //if the maze is not solvable, regenerate the maze
    maze[10][10] = 4;
    maze[1][1] = 1;
    maze[28][28] = 3;
    maze[15][15] = 2;
    maze[1][2] = 1;
    maze[2][1] = 1;
}


void portal(int &x, int &y, int **maze){
    int i = rand()%30;
    int j = rand()%30;
    while(maze[i][j] == 0){ //error here because maze is not defined
        i = rand()%30;
        j = rand()%30;
    }
    mvprintw(x+1, y+1, ".");
    x = i;
    y = j;
    mvprintw(x+1, y+1, "X");
}

int main()
{
    char str[80];

    initscr();
    cbreak();
    echo();


    //initial the main menu of the game
    //press enter to start the game
    //press q to quit the game
    mvprintw(0, 0, "Press enter to start the game! Press q to quit the game!");
    int ch = getch();
    if(ch == 'q'){
        endwin();
        return 0;
    }
    else if(ch == '\n'){
        mvprintw(0, 0, "You have entered the maze!");
    }

    int step=0;

    //calculate the time taken
    time_t start, end;
    time(&start);

    //display the maze, timer and step counter
    int **maze = new int*[30];
    for(int i=0;i<30;i++){
        maze[i] = new int[30];
    }
    generate_maze(maze);
    for(int i=0;i<30;i++){
        for(int j=0;j<30;j++){
            if(maze[i][j] == 0){
                mvprintw(i+1, j+1, "#");
            }
            else if(maze[i][j] == 1){
                mvprintw(i+1, j+1, ".");
            }
            else if(maze[i][j] == 2){
                mvprintw(i+1, j+1, "K");
            }
            else if(maze[i][j] == 3){
                mvprintw(i+1, j+1, "E");
            }
            else if(maze[i][j] == 4){
                mvprintw(i+1, j+1, "P");
            }
        }

    }
    mvprintw(3,50,"00:00");
    mvprintw(4,50,"Steps: %d",step);

    //define function portal
    //if the knight steps on the portal, he will be randomly tp to another place







    //allow player to move the knight
    int x = 1;
    int y = 1;
    int key = 0;
    int exit = 0;
    //initial position of the knight
    mvprintw(x+1, y+1, "X");
    //the knight will move until he finds the key and the exit using non-interruptive input
    // use a to move left, d to move right, w to move up, s to move down
    //make input invisible
    noecho();
    while(key == 0 || exit == 0){
        char ch = getch();
        if(ch == 'a'){
            //step += 1;
            if(maze[x][y-1] == 1 || maze[x][y-1] == 2 || maze[x][y-1] == 3){
                step += 1;
                mvprintw(x+1, y+1, ".");
                y--;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                    mvprintw(12, 50, "You found the key!");
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
                else if(maze[x][y] == 4){
                    portal(x, y, maze);
                }
            }
        }
        else if(ch == 'd'){
            //step += 1;
            if(maze[x][y+1] == 1 || maze[x][y+1] == 2 || maze[x][y+1] == 3){
                step += 1;
                mvprintw(x+1, y+1, ".");
                y++;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                    mvprintw(12, 50, "You found the key!");
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
                else if(maze[x][y] == 4){
                    portal(x, y, maze);
                }
            }
        }
        else if(ch == 'w'){
            //step += 1;
            if(maze[x-1][y] == 1 || maze[x-1][y] == 2 || maze[x-1][y] == 3){
                step += 1;
                mvprintw(x+1, y+1, ".");
                x--;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                    mvprintw(12, 50, "You found the key!");
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
                else if(maze[x][y] == 4){
                    portal(x, y, maze);
                }
            }
        }
        else if(ch == 's'){
            //step += 1;
            if(maze[x+1][y] == 1|| maze[x+1][y] == 2|| maze[x+1][y] == 3){
                 step += 1;
                 mvprintw(x+1, y+1, ".");
                 x++;
                 mvprintw(x+1, y+1, "X");
                 if(maze[x][y] == 2){
                      key = 1;
                      mvprintw(12, 50, "You found the key!");
                 }
                 else if(maze[x][y] == 3){
                      exit = 1;
                 }
                    else if(maze[x][y] == 4){
                        portal(x, y, maze);
                    }
                }       
        }
        mvprintw(4,50,"Steps: %d",step); 
    }
    //when the knight finds the key and the exit, quit the ono-interruptive input
    echo();

    time (&end);
    double dif = difftime (end,start);
    //display the score of the player on screen
    //the score is calculated by the number of steps the player takes and time taken to complete the game
    mvprintw(10, 50, "You have taken %d steps to complete the game!", step);
    mvprintw(11, 50, "You have taken %f seconds to complete the game!", dif);
    int score = dif/step*1000;
    mvprintw(12, 50, "Your score is %d!", score);

    //type the name for storing the score
    mvprintw(20, 50, "Please type your name: ");
    getstr(str);
    mvprintw(21, 50, "Your name is %s", str);
    //if name is blank or too long, ignore the name
    if(strlen(str) == 0 || strlen(str) > 20){
        mvprintw(22, 50, "Your name is invalid!");
        getch();
        endwin();
        return 0;
    }

    //add the score to the file record.txt
    //format: name score
    ofstream fout;
    fout.open("record.txt",ios::app);
    fout << str << " " << score << endl;
    fout.close();
    //sort the file record.txt by score
    //use bubble sort
    ifstream fin;
    fin.open("record.txt");
    string name[100];
    int score1[100];
    int i = 0;
    while(fin >> name[i] >> score1[i]){
        i++;
    }
    for(int j=0;j<i;j++){
        for(int k=0;k<i-j-1;k++){
            if(score1[k] < score1[k+1]){
                int temp = score1[k];
                score1[k] = score1[k+1];
                score1[k+1] = temp;
                string temp1 = name[k];
                name[k] = name[k+1];
                name[k+1] = temp1;
            }
        }
    }
    fin.close();
    //display the top 10 scores in record.txt
    //if EOL is reached, stop displaying
    mvprintw(30, 50, "Top 10 scores:");
    for(int j=0;j<i;j++){
        mvprintw(31+j, 50, "%s %d", name[j].c_str(), score1[j]);
    }



    mvprintw(13, 50, "You found the key and the exit!");
    mvprintw(14, 50, "You have escaped from the maze!");
    mvprintw(15, 50, "Thanks for playing the game!");
    getch();
    endwin();
    return 0;
}

