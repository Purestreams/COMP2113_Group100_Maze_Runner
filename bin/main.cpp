#include <cstring> // add this header for strlen
#include <ncurses.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <ctime>
#include <string>
#include <cstring> // add this header for strlen
#include <ncurses.h> // add this header for mvprintw and wgetnstr
#include "main.h"

using namespace std;

//using string instead of char array anytime possible
//use cpp style casting instead of c style casting
//This project is aim to develop a game by using ncurses library
//The knight is trapped in a maze and he needs to escape from the maze by finding the key
//using dynamic memory allocation to store the maze

//generating a 30x30 maze
//0 represents wall, 1 represents path, 2 represents key, 3 represents exit
//the maze is generated by using random number generator
void generate_maze(int **maze){
    srand(time(NULL));
    for(int i=0;i<30;i++){
        for(int j=0;j<30;j++){
            if(i==0 || i==29 || j==0 || j==29){
                maze[i][j] = 0;
            }
            else{
                if (rand()%100 < 20){
                    maze[i][j] = 0;
                }
                else
                maze[i][j] = 1;
            }
        }
    }
    //make sure the knight can escape from the maze
    //check whether the maze is solvable
    //if the maze is not solvable, regenerate the maze
    
    maze[1][1] = 1;
    maze[28][28] = 3;
    maze[15][15] = 2;
}


int main()
{
    char str[80];

    initscr();
    cbreak();
    echo();

    //display the maze
    int **maze = new int*[30];
    for(int i=0;i<30;i++){
        maze[i] = new int[30];
    }
    generate_maze(maze);
    for(int i=0;i<30;i++){
        for(int j=0;j<30;j++){
            if(maze[i][j] == 0){
                mvprintw(i+1, j+1, "#");
            }
            else if(maze[i][j] == 1){
                mvprintw(i+1, j+1, ".");
            }
            else if(maze[i][j] == 2){
                mvprintw(i+1, j+1, "K");
            }
            else if(maze[i][j] == 3){
                mvprintw(i+1, j+1, "E");
            }
        }

    }

    //allow player to move the knight
    int x = 1;
    int y = 1;
    int key = 0;
    int exit = 0;
    //initial position of the knight
    mvprintw(x+1, y+1, "X");
    //the knight will move until he finds the key and the exit using non-interruptive input
    // use a to move left, d to move right, w to move up, s to move down
    //make input invisible
    noecho();
    while(key == 0 || exit == 0){
        char ch = getch();
        if(ch == 'a'){
            if(maze[x][y-1] == 1 || maze[x][y-1] == 2 || maze[x][y-1] == 3){
                mvprintw(x+1, y+1, ".");
                y--;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
            }
        }
        else if(ch == 'd'){
            if(maze[x][y+1] == 1 || maze[x][y+1] == 2 || maze[x][y+1] == 3){
                mvprintw(x+1, y+1, ".");
                y++;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
            }
        }
        else if(ch == 'w'){
            if(maze[x-1][y] == 1 || maze[x-1][y] == 2 || maze[x-1][y] == 3){
                mvprintw(x+1, y+1, ".");
                x--;
                mvprintw(x+1, y+1, "X");
                if(maze[x][y] == 2){
                    key = 1;
                }
                else if(maze[x][y] == 3){
                    exit = 1;
                }
            }
        }
        else if(ch == 's'){
            if(maze[x+1][y] == 1
                || maze[x+1][y] == 2
                || maze[x+1][y] == 3){
                 mvprintw(x+1, y+1, ".");
                 x++;
                 mvprintw(x+1, y+1, "X");
                 if(maze[x][y] == 2){
                      key = 1;
                 }
                 else if(maze[x][y] == 3){
                      exit = 1;
                 }
                }
        }
    }


    mvprintw(12, 10, "You found the key and the exit!");
    mvprintw(13, 10, "You have escaped from the maze!");
    mvprintw(14, 10, "Thanks for playing the game!");
    getch();
    endwin();
    return 0;
}

